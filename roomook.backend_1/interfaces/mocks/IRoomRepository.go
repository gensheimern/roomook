// Code generated by MockGen. DO NOT EDIT.
// Source: jacob.de/roombook/interfaces (interfaces: IRoomRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "jacob.de/roomook/roomook.backend/models"
	reflect "reflect"
)

// MockIRoomRepository is a mock of IRoomRepository interface
type MockIRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRoomRepositoryMockRecorder
}

// MockIRoomRepositoryMockRecorder is the mock recorder for MockIRoomRepository
type MockIRoomRepositoryMockRecorder struct {
	mock *MockIRoomRepository
}

// NewMockIRoomRepository creates a new mock instance
func NewMockIRoomRepository(ctrl *gomock.Controller) *MockIRoomRepository {
	mock := &MockIRoomRepository{ctrl: ctrl}
	mock.recorder = &MockIRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRoomRepository) EXPECT() *MockIRoomRepositoryMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method
func (m *MockIRoomRepository) CreateRoom(arg0 models.RoomModel) (models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", arg0)
	ret0, _ := ret[0].(models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom
func (mr *MockIRoomRepositoryMockRecorder) CreateRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockIRoomRepository)(nil).CreateRoom), arg0)
}

// DeleteRoom mocks base method
func (m *MockIRoomRepository) DeleteRoom(arg0 string) (models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", arg0)
	ret0, _ := ret[0].(models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoom indicates an expected call of DeleteRoom
func (mr *MockIRoomRepositoryMockRecorder) DeleteRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockIRoomRepository)(nil).DeleteRoom), arg0)
}

// GetAllRoom mocks base method
func (m *MockIRoomRepository) GetAllRoom() ([]models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoom")
	ret0, _ := ret[0].([]models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoom indicates an expected call of GetAllRoom
func (mr *MockIRoomRepositoryMockRecorder) GetAllRoom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoom", reflect.TypeOf((*MockIRoomRepository)(nil).GetAllRoom))
}

// GetRoomByID mocks base method
func (m *MockIRoomRepository) GetRoomByID(arg0 string) (models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", arg0)
	ret0, _ := ret[0].(models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID
func (mr *MockIRoomRepositoryMockRecorder) GetRoomByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockIRoomRepository)(nil).GetRoomByID), arg0)
}

// RoomExists mocks base method
func (m *MockIRoomRepository) RoomExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoomExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoomExists indicates an expected call of RoomExists
func (mr *MockIRoomRepositoryMockRecorder) RoomExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoomExists", reflect.TypeOf((*MockIRoomRepository)(nil).RoomExists), arg0)
}

// UpdateRoom mocks base method
func (m *MockIRoomRepository) UpdateRoom(arg0 string, arg1 models.RoomModel) (models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", arg0, arg1)
	ret0, _ := ret[0].(models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom
func (mr *MockIRoomRepositoryMockRecorder) UpdateRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockIRoomRepository)(nil).UpdateRoom), arg0, arg1)
}
