// Code generated by MockGen. DO NOT EDIT.
// Source: jacob.de/roombook/interfaces (interfaces: IBookingService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "jacob.de/roomook/roomook.backend/models"
	reflect "reflect"
)

// MockIBookingService is a mock of IBookingService interface
type MockIBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockIBookingServiceMockRecorder
}

// MockIBookingServiceMockRecorder is the mock recorder for MockIBookingService
type MockIBookingServiceMockRecorder struct {
	mock *MockIBookingService
}

// NewMockIBookingService creates a new mock instance
func NewMockIBookingService(ctrl *gomock.Controller) *MockIBookingService {
	mock := &MockIBookingService{ctrl: ctrl}
	mock.recorder = &MockIBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBookingService) EXPECT() *MockIBookingServiceMockRecorder {
	return m.recorder
}

// SBookingExists mocks base method
func (m *MockIBookingService) SBookingExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SBookingExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SBookingExists indicates an expected call of SBookingExists
func (mr *MockIBookingServiceMockRecorder) SBookingExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SBookingExists", reflect.TypeOf((*MockIBookingService)(nil).SBookingExists), arg0)
}

// SBookingExistsByDateTime mocks base method
func (m *MockIBookingService) SBookingExistsByDateTime(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SBookingExistsByDateTime", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SBookingExistsByDateTime indicates an expected call of SBookingExistsByDateTime
func (mr *MockIBookingServiceMockRecorder) SBookingExistsByDateTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SBookingExistsByDateTime", reflect.TypeOf((*MockIBookingService)(nil).SBookingExistsByDateTime), arg0, arg1)
}

// SCreateBooking mocks base method
func (m *MockIBookingService) SCreateBooking(arg0 models.BookingModel) (models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCreateBooking", arg0)
	ret0, _ := ret[0].(models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCreateBooking indicates an expected call of SCreateBooking
func (mr *MockIBookingServiceMockRecorder) SCreateBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCreateBooking", reflect.TypeOf((*MockIBookingService)(nil).SCreateBooking), arg0)
}

// SDeleteBooking mocks base method
func (m *MockIBookingService) SDeleteBooking(arg0 string) (models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SDeleteBooking", arg0)
	ret0, _ := ret[0].(models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SDeleteBooking indicates an expected call of SDeleteBooking
func (mr *MockIBookingServiceMockRecorder) SDeleteBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDeleteBooking", reflect.TypeOf((*MockIBookingService)(nil).SDeleteBooking), arg0)
}

// SGetAllBooking mocks base method
func (m *MockIBookingService) SGetAllBooking() ([]models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SGetAllBooking")
	ret0, _ := ret[0].([]models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SGetAllBooking indicates an expected call of SGetAllBooking
func (mr *MockIBookingServiceMockRecorder) SGetAllBooking() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SGetAllBooking", reflect.TypeOf((*MockIBookingService)(nil).SGetAllBooking))
}

// SGetBookingByID mocks base method
func (m *MockIBookingService) SGetBookingByID(arg0 string) (models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SGetBookingByID", arg0)
	ret0, _ := ret[0].(models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SGetBookingByID indicates an expected call of SGetBookingByID
func (mr *MockIBookingServiceMockRecorder) SGetBookingByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SGetBookingByID", reflect.TypeOf((*MockIBookingService)(nil).SGetBookingByID), arg0)
}

// SUpdateBooking mocks base method
func (m *MockIBookingService) SUpdateBooking(arg0 string, arg1 models.BookingModel) (models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SUpdateBooking", arg0, arg1)
	ret0, _ := ret[0].(models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUpdateBooking indicates an expected call of SUpdateBooking
func (mr *MockIBookingServiceMockRecorder) SUpdateBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUpdateBooking", reflect.TypeOf((*MockIBookingService)(nil).SUpdateBooking), arg0, arg1)
}
