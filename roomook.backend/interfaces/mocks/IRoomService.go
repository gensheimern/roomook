// Code generated by MockGen. DO NOT EDIT.
// Source: jacob.de/roombook/interfaces (interfaces: IRoomService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "jacob.de/roomook/roomook.backend/models"
	reflect "reflect"
)

// MockIRoomService is a mock of IRoomService interface
type MockIRoomService struct {
	ctrl     *gomock.Controller
	recorder *MockIRoomServiceMockRecorder
}

// MockIRoomServiceMockRecorder is the mock recorder for MockIRoomService
type MockIRoomServiceMockRecorder struct {
	mock *MockIRoomService
}

// NewMockIRoomService creates a new mock instance
func NewMockIRoomService(ctrl *gomock.Controller) *MockIRoomService {
	mock := &MockIRoomService{ctrl: ctrl}
	mock.recorder = &MockIRoomServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRoomService) EXPECT() *MockIRoomServiceMockRecorder {
	return m.recorder
}

// SCreateRoom mocks base method
func (m *MockIRoomService) SCreateRoom(arg0 models.RoomModel) (models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCreateRoom", arg0)
	ret0, _ := ret[0].(models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCreateRoom indicates an expected call of SCreateRoom
func (mr *MockIRoomServiceMockRecorder) SCreateRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCreateRoom", reflect.TypeOf((*MockIRoomService)(nil).SCreateRoom), arg0)
}

// SDeleteRoom mocks base method
func (m *MockIRoomService) SDeleteRoom(arg0 string) (models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SDeleteRoom", arg0)
	ret0, _ := ret[0].(models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SDeleteRoom indicates an expected call of SDeleteRoom
func (mr *MockIRoomServiceMockRecorder) SDeleteRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDeleteRoom", reflect.TypeOf((*MockIRoomService)(nil).SDeleteRoom), arg0)
}

// SGetAllRoom mocks base method
func (m *MockIRoomService) SGetAllRoom() ([]models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SGetAllRoom")
	ret0, _ := ret[0].([]models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SGetAllRoom indicates an expected call of SGetAllRoom
func (mr *MockIRoomServiceMockRecorder) SGetAllRoom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SGetAllRoom", reflect.TypeOf((*MockIRoomService)(nil).SGetAllRoom))
}

// SGetRoomByID mocks base method
func (m *MockIRoomService) SGetRoomByID(arg0 string) (models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SGetRoomByID", arg0)
	ret0, _ := ret[0].(models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SGetRoomByID indicates an expected call of SGetRoomByID
func (mr *MockIRoomServiceMockRecorder) SGetRoomByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SGetRoomByID", reflect.TypeOf((*MockIRoomService)(nil).SGetRoomByID), arg0)
}

// SRoomExists mocks base method
func (m *MockIRoomService) SRoomExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRoomExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRoomExists indicates an expected call of SRoomExists
func (mr *MockIRoomServiceMockRecorder) SRoomExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRoomExists", reflect.TypeOf((*MockIRoomService)(nil).SRoomExists), arg0)
}

// SUpdateRoom mocks base method
func (m *MockIRoomService) SUpdateRoom(arg0 string, arg1 models.RoomModel) (models.RoomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SUpdateRoom", arg0, arg1)
	ret0, _ := ret[0].(models.RoomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUpdateRoom indicates an expected call of SUpdateRoom
func (mr *MockIRoomServiceMockRecorder) SUpdateRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUpdateRoom", reflect.TypeOf((*MockIRoomService)(nil).SUpdateRoom), arg0, arg1)
}
