// Code generated by MockGen. DO NOT EDIT.
// Source: jacob.de/roombook/interfaces (interfaces: IDbHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "jacob.de/roomook/roomook.backend/interfaces"
	reflect "reflect"
)

// MockIDbHandler is a mock of IDbHandler interface
type MockIDbHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIDbHandlerMockRecorder
}

// MockIDbHandlerMockRecorder is the mock recorder for MockIDbHandler
type MockIDbHandlerMockRecorder struct {
	mock *MockIDbHandler
}

// NewMockIDbHandler creates a new mock instance
func NewMockIDbHandler(ctrl *gomock.Controller) *MockIDbHandler {
	mock := &MockIDbHandler{ctrl: ctrl}
	mock.recorder = &MockIDbHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDbHandler) EXPECT() *MockIDbHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockIDbHandler) Execute(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", arg0)
}

// Execute indicates an expected call of Execute
func (mr *MockIDbHandlerMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIDbHandler)(nil).Execute), arg0)
}

// PreparedQuery mocks base method
func (m *MockIDbHandler) PreparedQuery(arg0 string, arg1 ...interface{}) (interfaces.IRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreparedQuery", varargs...)
	ret0, _ := ret[0].(interfaces.IRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreparedQuery indicates an expected call of PreparedQuery
func (mr *MockIDbHandlerMockRecorder) PreparedQuery(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparedQuery", reflect.TypeOf((*MockIDbHandler)(nil).PreparedQuery), varargs...)
}

// Query mocks base method
func (m *MockIDbHandler) Query(arg0 string) (interfaces.IRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(interfaces.IRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockIDbHandlerMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIDbHandler)(nil).Query), arg0)
}
