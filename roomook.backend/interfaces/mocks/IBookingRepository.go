// Code generated by MockGen. DO NOT EDIT.
// Source: jacob.de/roombook/interfaces (interfaces: IBookingRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "jacob.de/roomook/roomook.backend/models"
	reflect "reflect"
)

// MockIBookingRepository is a mock of IBookingRepository interface
type MockIBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookingRepositoryMockRecorder
}

// MockIBookingRepositoryMockRecorder is the mock recorder for MockIBookingRepository
type MockIBookingRepositoryMockRecorder struct {
	mock *MockIBookingRepository
}

// NewMockIBookingRepository creates a new mock instance
func NewMockIBookingRepository(ctrl *gomock.Controller) *MockIBookingRepository {
	mock := &MockIBookingRepository{ctrl: ctrl}
	mock.recorder = &MockIBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBookingRepository) EXPECT() *MockIBookingRepositoryMockRecorder {
	return m.recorder
}

// BookingExists mocks base method
func (m *MockIBookingRepository) BookingExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookingExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookingExists indicates an expected call of BookingExists
func (mr *MockIBookingRepositoryMockRecorder) BookingExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookingExists", reflect.TypeOf((*MockIBookingRepository)(nil).BookingExists), arg0)
}

// BookingExistsByDateTime mocks base method
func (m *MockIBookingRepository) BookingExistsByDateTime(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookingExistsByDateTime", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookingExistsByDateTime indicates an expected call of BookingExistsByDateTime
func (mr *MockIBookingRepositoryMockRecorder) BookingExistsByDateTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookingExistsByDateTime", reflect.TypeOf((*MockIBookingRepository)(nil).BookingExistsByDateTime), arg0, arg1)
}

// CreateBooking mocks base method
func (m *MockIBookingRepository) CreateBooking(arg0 models.BookingModel) (models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", arg0)
	ret0, _ := ret[0].(models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking
func (mr *MockIBookingRepositoryMockRecorder) CreateBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockIBookingRepository)(nil).CreateBooking), arg0)
}

// DeleteBooking mocks base method
func (m *MockIBookingRepository) DeleteBooking(arg0 string) (models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBooking", arg0)
	ret0, _ := ret[0].(models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBooking indicates an expected call of DeleteBooking
func (mr *MockIBookingRepositoryMockRecorder) DeleteBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBooking", reflect.TypeOf((*MockIBookingRepository)(nil).DeleteBooking), arg0)
}

// GetAllBooking mocks base method
func (m *MockIBookingRepository) GetAllBooking() ([]models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooking")
	ret0, _ := ret[0].([]models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooking indicates an expected call of GetAllBooking
func (mr *MockIBookingRepositoryMockRecorder) GetAllBooking() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooking", reflect.TypeOf((*MockIBookingRepository)(nil).GetAllBooking))
}

// GetBookingByID mocks base method
func (m *MockIBookingRepository) GetBookingByID(arg0 string) (models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingByID", arg0)
	ret0, _ := ret[0].(models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingByID indicates an expected call of GetBookingByID
func (mr *MockIBookingRepositoryMockRecorder) GetBookingByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingByID", reflect.TypeOf((*MockIBookingRepository)(nil).GetBookingByID), arg0)
}

// UpdateBooking mocks base method
func (m *MockIBookingRepository) UpdateBooking(arg0 string, arg1 models.BookingModel) (models.BookingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBooking", arg0, arg1)
	ret0, _ := ret[0].(models.BookingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBooking indicates an expected call of UpdateBooking
func (mr *MockIBookingRepositoryMockRecorder) UpdateBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBooking", reflect.TypeOf((*MockIBookingRepository)(nil).UpdateBooking), arg0, arg1)
}
